@using BrowserInterop
@using BrowserInterop.Geolocation
@using BrowserInterop.Extensions
@using GraphQL.Client.Abstractions
@using GraphQL.Client.Http
@using Data;

@page "/find"

@inject IJSRuntime jsRuntime
@inject IGraphQLClient gclient

@*//TODO: Get Location from Requester IP, if gps location is not available*@
@*//TODO: Add caching to the next half hour client side using the local storage. Think about server side caching *@

<h3>Find</h3>

@if(shops.Any())
{
    foreach(var shop in shops.Where(x=>x.Categories.All(x=>x.Title.Contains("Gas Stations") != true)))
    {
        <ul>
            <ul>
                <li><a href=@shop.Url>@shop.Name</a></li>
                <ul> 
                    <li>@shop.Rating</li>
                    <li>@shop.Price</li>
                    <li>@toMiles(shop.Distance).ToString("0.00") Miles Away</li>
                
                @foreach(var category in shop.Categories)
                {
                    <ul>
                        <li>@category.Title</li>
                   </ul>
                }
            </ul></ul>
        </ul>
    }

}else{
    <p>Please enable GeoLocation</p>
}

@code{
    List<Business> shops = new ();
    private GeolocationResult? currentPosition;

    protected override async Task OnInitializedAsync() {
        var window = await jsRuntime.Window();
        var navigator = await window.Navigator();
        var newPos = await navigator.Geolocation.GetCurrentPosition();

        if (newPos.hasChanged(currentPosition))
            currentPosition = newPos;
        else
            return;
        if (currentPosition.Error is not null) 
            return;

        var request = Query.GetAllCategory(currentPosition?.getLocation() ?? "get location from IP, I guess");

        var response = await gclient.SendQueryAsync<YelpResponse>(request);
        shops = response?.Data?.Search?.Business?.ToList() ?? shops;
    }
    public static double toMiles(double meters) =>
        meters * 0.000621371192;
}
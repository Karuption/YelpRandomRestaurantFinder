@using GraphQL.Client.Abstractions
@using GraphQL.Client.Http

@using Extensions;
@using Models

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using YelpRandomRestaurantFinder.Data
@inject ProtectedLocalStorage ProtectedLocalStore

@inject IJSRuntime jsRuntime
@inject IGraphQLClient gclient
@inject ILocationService LocationService
@inject ILogger<YelpResponse> _logger

@*//TODO: Get Location from Requester IP, if gps location is not available*@

<h3 class="text-primary">Find</h3>
<EditForm Model=@overridenPosition>
    <div classs="form-group">
        <label for="PositionOverride" class="form-label">Override Position</label>
        <InputText class="form-text" @bind-Value=@overridenPosition.OverridenLocation />
                <button class="btn btn-primary" @onclick="overrideSearch">Override</button>
        <h3 class="h3">All Categories</h3>
        @foreach(var cat in selectedCategories.Keys ) {
            <input type="checkbox" value=@cat @oninput="x => toggleCategory((bool) x.Value, cat)" checked>
            <label >@cat</label>
        }
    </div>
</EditForm>

@if (selectedLocations is not null) {
    @foreach (var photo in selectedLocations.Photos) {
        <img class="img img-thumbnail" src=@photo />
    }
    <ul>
        <li class="list-group list-group-item"><a class="link link-primary" href=@selectedLocations.Url>@selectedLocations.Name</a></li>
        <li class="list-group list-group-item">Rating: @selectedLocations.Rating</li>
        <li class="list-group list-group-item">Price: @selectedLocations.Price</li>
        <li class="list-group list-group-item">Distance: @toMiles(selectedLocations.Distance).ToString("0.00") Miles Away</li>
        <li class="list-group list-group-item"><h5 class="h5">Categories</h5>
        <ul>
            @foreach (var category in selectedLocations?.Categories) {
                <li class="list-group list-group-item">@category.Title</li>
            }
        </ul>
        </li>
    </ul>
} else {
     <p>Restaurant information is not available</p>
}



@code {
    private List<Business> locations = new();
    private Business? selectedLocations;
    private Dictionary<string, bool> selectedCategories = new();
    private SearchLocation currentPosition = new();
    private SearchLocation overridenPosition = new();
    private DateTime? cacheDate = null;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        overridenPosition.OverridenLocation = "Enter a location";

        cacheDate = (await ProtectedLocalStore.GetAsync<DateTime?>("BusinessCacheDateTime")).Value;
        locations = (await ProtectedLocalStore.GetAsync<List<Business>?>("Business")).Value ?? locations;

        (currentPosition, bool hasChanged) = await LocationService.GetLocation(currentPosition, overridenPosition);

        if (hasChanged) await GetYelpData();

        if (currentPosition is null || currentPosition.Error is not null) {
            await clearCache(); //if there is no position, overridden or not, there is nothing to get.
            return;
        }

        if (cacheDate is null || hasChanged || DateTime.UtcNow >= cacheDate) 
            await GetYelpData();

        getRandomShop();
    }

    private async void overrideSearch() {
        if (overridenPosition?.OverridenLocation is null || overridenPosition.OverridenLocation.Equals("") || overridenPosition.OverridenLocation.Equals("Enter a location")) {
            //is this ever null with the one way binding or is this an extra guard clause?
            getRandomShop();
            return;
        }
        overridenPosition.isOverridden = true;
        if (overridenPosition.hasChanged(currentPosition)) {
            await clearCache();
            currentPosition = overridenPosition;
            overridenPosition = new();
            await GetYelpData();
        }
        getRandomShop();
    }
    public static double toMiles(double meters) =>
        meters * 0.000621371192;
    public static double toMeters(double miles) =>
        miles / 0.000621371192;

    public static DateTime roundUp30(DateTime current) =>
        current.Hour < 30
            ? current.AddMinutes(39 - current.Minute)//round just short to account for seconds
            : current.AddMinutes(59 - current.Minute);

    public async Task GetYelpData() {
        var request = Query.GetAllCategory(currentPosition?.getCurrentLocation());
        var response = await gclient.SendQueryAsync<YelpResponse>(request);

        if (response.Errors is not null) {
            _logger.LogError($"GraphQL Response Error: {response.Errors[0].Message} for Location {request.Variables}");
            await clearCache();
            locations = new ();
            return;
        }


        locations = response?.Data?.Search?.Business.ToList() ?? locations;

        foreach (var title in locations.SelectMany(x => x.Categories.Select(x => x.Title)).Distinct())
            if(!selectedCategories.ContainsKey(title)) selectedCategories.Add((string)title, true);
        await ProtectedLocalStore.SetAsync("Business", locations);
        await ProtectedLocalStore.SetAsync("BusinessCacheDateTime", roundUp30(DateTime.UtcNow));
    }

    public async Task clearCache() {
        await ProtectedLocalStore.DeleteAsync("Business");
        await ProtectedLocalStore.DeleteAsync("BusinessCacheDateTime");
        cacheDate = null;
    }

    public void getRandomShop(string value = "") {
        selectedLocations = locations.Where(x=>x.Categories.Any(x=> selectedCategories.ContainsKey(x.Title)&&selectedCategories[x.Title])).GetRandom();
        StateHasChanged();
    }
    public void toggleCategory(bool isChecked, string catTitle) {
        if (selectedCategories.ContainsKey(catTitle))
            selectedCategories[catTitle] = isChecked;
    }
}

@using BrowserInterop
@using BrowserInterop.Geolocation
@using BrowserInterop.Extensions

@using GraphQL.Client.Abstractions
@using GraphQL.Client.Http

@using Data;
@using Extensions;
@using Models

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore

@inject IJSRuntime jsRuntime
@inject IGraphQLClient gclient
@inject ILocationService LocationService
@inject ILogger<YelpResponse> _logger

@*//TODO: Get Location from Requester IP, if gps location is not available*@

<h3>Find</h3>
<EditForm Model=@_overrideLocation>
    <div classs="form-group">
        <label for="PositionOverride">Override Position</label>
        <InputText @bind-Value=@_overrideLocation.OverridenLocation placeholder=@_currentSearchPosition.OverridenLocation />
            <button class="btn btn-primary"  @onclick="overrideSearch">Override</button>
    </div>
</EditForm>

@if (selectedShop is not null) {
    @foreach (var photo in selectedShop.Photos) {
        <img src=@photo />
    }
    <ul>
        <li><a href=@selectedShop.Url>@selectedShop.Name</a></li>
        <li>@selectedShop.Rating</li>
        <li>@selectedShop.Price</li>
        <li>@toMiles(selectedShop.Distance).ToString("0.00") Miles Away</li>

        @foreach (var category in selectedShop?.Categories) {
            <ul>
                <li>@category.Title</li>
            </ul>
        }
    </ul>
} else {
     <p>GeoLocation is not available</p>
}



@code {
    private List<Business> shops = new();
    private Business? selectedShop;
    private SearchLocation _currentSearchPosition = new();
    private SearchLocation _overrideLocation = new();
    private DateTime? cacheDate = null;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();

        cacheDate = (await ProtectedLocalStore.GetAsync<DateTime?>("BusinessCacheDateTime")).Value;
        shops = (await ProtectedLocalStore.GetAsync<List<Business>?>("Business")).Value ?? shops;

        (_currentSearchPosition, bool hasChanged) = await LocationService.GetLocation(_currentSearchPosition, _overrideLocation);

        if (hasChanged) await GetYelpData();

        if (_currentSearchPosition is null || _currentSearchPosition.Error is not null) {
            await clearCache();
        }

        if (cacheDate is null || hasChanged || DateTime.UtcNow >= cacheDate) 
            await GetYelpData();
        getRandomShop();
    }

    private async void overrideSearch() {
        if (_overrideLocation?.OverridenLocation is null || _overrideLocation.OverridenLocation.Equals("")) {
            getRandomShop();
            return;
        }
        _overrideLocation.isOverridden = true;
        if (_overrideLocation.hasChanged(_currentSearchPosition)) {
            await clearCache();
            _currentSearchPosition = _overrideLocation;
            _overrideLocation = new();
            await GetYelpData();
        }
        getRandomShop();
    }
    public static double toMiles(double meters) =>
        meters * 0.000621371192;

    public static DateTime roundUp30(DateTime current) =>
        current.Hour < 30
            ? current.AddMinutes(30 - current.Minute)
            : current.AddMinutes(59 - current.Minute + 1);

    public async Task GetYelpData() {
        var request = Query.GetAllCategory(_currentSearchPosition?.getCurrentLocation());

        var response = await gclient.SendQueryAsync<YelpResponse>(request);
        if (response.Errors is not null) {
            _logger.LogError($"GraphQL Response Error: {response.Errors[0].Message}");
            return;
        }


        shops = response?.Data?.Search?.Business?.Where(x => x.Categories.All(x => x.Title.Contains("Gas Stations") != true)).ToList()
                ?? shops;
        await ProtectedLocalStore.SetAsync("Business", shops);
        await ProtectedLocalStore.SetAsync("BusinessCacheDateTime", roundUp30(DateTime.UtcNow));
    }

    public async Task clearCache() {
        await ProtectedLocalStore.DeleteAsync("Business");
        await ProtectedLocalStore.DeleteAsync("BusinessCacheDateTime");
        cacheDate = null;
    }

    public void getRandomShop() {
        selectedShop = shops?.GetRandom();
        StateHasChanged();
    }
}

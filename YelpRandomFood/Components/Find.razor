@using BrowserInterop
@using BrowserInterop.Geolocation
@using BrowserInterop.Extensions
@using GraphQL.Client.Abstractions
@using GraphQL.Client.Http
@using Data;
@using Extensions;

@inject IJSRuntime jsRuntime
@inject IGraphQLClient gclient

@*//TODO: Get Location from Requester IP, if gps location is not available*@

<h3>Find</h3>

@if (selectedShop is not null)
{
    <ul>
        <li><a href=@selectedShop.Url>@selectedShop.Name</a></li>
            <li>@selectedShop.Rating</li>
            <li>@selectedShop.Price</li>
            <li>@toMiles(selectedShop.Distance).ToString("0.00") Miles Away</li>

            @foreach(var category in selectedShop.Categories) {
                <ul>
                    <li>@category.Title</li>
                </ul>
            }
    </ul>
}else { <p>Please enable GeoLocation</p> }



@code{
    private List<Business> shops = new();
    private Business? selectedShop;
    private WindowInterop window;
    private GeolocationResult? currentPosition;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        window = await jsRuntime.Window();
        var navigator = await window.Navigator();
        var newPos = await navigator.Geolocation.GetCurrentPosition();

        DateTime? cacheDate = null;

        if (newPos.hasChanged(currentPosition))
            currentPosition = newPos;

        if (currentPosition?.Location is  null) {
            return;
        }

        try {
            cacheDate = await window.LocalStorage.GetItem<DateTime?>("BusinessCacheDateTime");
            var shopsCache = await window.LocalStorage.GetItem<List<Business>?>("Business");
            shops = shopsCache ?? shops;
        } catch (Exception ex) {}

        if (cacheDate is null || DateTime.UtcNow >= cacheDate) {

            var request = Query.GetAllCategory(currentPosition?.getLocation() ?? "Do IP based lookup");
            var response = await gclient.SendQueryAsync<YelpResponse>(request);

            shops = response?.Data?.Search?.Business?.Where(x=>x.Categories.All(x=>x.Title.Contains("Gas Stations") != true)).ToList() 
                    ?? shops;
            await window.LocalStorage.SetItem("Business", shops);
            await window.LocalStorage.SetItem("BusinessCacheDateTime", roundUp30(DateTime.UtcNow));
        }
        selectedShop = shops.GetRandom();
    }

    public static double toMiles(double meters) =>
        meters * 0.000621371192;

    public static DateTime roundUp30(DateTime current) =>
        (current.Hour < 30)
            ?current.AddMinutes(30 - current.Minute)
            :current.AddMinutes(59 - current.Minute + 1);

}
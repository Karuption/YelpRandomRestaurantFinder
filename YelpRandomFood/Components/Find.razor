@using BrowserInterop
@using BrowserInterop.Geolocation
@using BrowserInterop.Extensions

@using GraphQL.Client.Abstractions
@using GraphQL.Client.Http

@using Data;
@using Extensions;

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore

@inject IJSRuntime jsRuntime
@inject IGraphQLClient gclient
@inject ILocationService LocationService

@*//TODO: Get Location from Requester IP, if gps location is not available*@

<h3>Find</h3>

@if (selectedShop is not null) {
    @foreach (var photo in selectedShop.Photos) {
        <img src=@photo />
    }
    <ul>
        <li><a href=@selectedShop.Url>@selectedShop.Name</a></li>
        <li>@selectedShop.Rating</li>
        <li>@selectedShop.Price</li>
        <li>@toMiles(selectedShop.Distance).ToString("0.00") Miles Away</li>

        @foreach (var category in selectedShop?.Categories) {
            <ul>
                <li>@category.Title</li>
            </ul>
        }
    </ul>
} else {
     <p>Please enable GeoLocation</p>
}



@code {
    private List<Business> shops = new();
    private Business? selectedShop;
    private WindowInterop window;
    private GeolocationResult? currentPosition;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        window = await jsRuntime.Window();
        DateTime? cacheDate = null;

        (currentPosition, bool hasChanged) = await LocationService.GetLocation(currentPosition);

        if (!hasChanged) {
            try {
                cacheDate = (await ProtectedLocalStore.GetAsync<DateTime?>("BusinessCacheDateTime")).Value;
                var shopsCache = await ProtectedLocalStore.GetAsync<List<Business>?>("Business");
                shops = shopsCache.Value ?? shops;
            } catch (Exception ex) { }
        }
        if (currentPosition is null || currentPosition.Error is not null) {
            await window.LocalStorage.Clear();
        }

        if (cacheDate is null || hasChanged || DateTime.UtcNow >= cacheDate) {
            var request = Query.GetAllCategory(currentPosition?.getCoords());
            var response = await gclient.SendQueryAsync<YelpResponse>(request);

            shops = response?.Data?.Search?.Business?.Where(x => x.Categories.All(x => x.Title.Contains("Gas Stations") != true)).ToList()
                    ?? shops;
            await ProtectedLocalStore.SetAsync("Business", shops);
            await ProtectedLocalStore.SetAsync("BusinessCacheDateTime", roundUp30(DateTime.UtcNow));

        }
        selectedShop = shops?.GetRandom();
    }

    public static double toMiles(double meters) =>
        meters * 0.000621371192;

    public static DateTime roundUp30(DateTime current) =>
        current.Hour < 30
            ? current.AddMinutes(30 - current.Minute)
            : current.AddMinutes(59 - current.Minute + 1);

}
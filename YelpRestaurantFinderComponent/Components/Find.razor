@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.ProtectedBrowserStorage
@using YelpRestaurantFinderComponent.Models
@using YelpRestaurantFinderComponent.Extensions
@using YelpRestaurantFinderComponent.Services

@inject ProtectedSessionStorage ProtectedSessionStore
@inject IJSRuntime jsRuntime
@inject ILocationService LocationService
@inject IYelpRetrievalService yelp

<h3 class="text-primary">Find A Place To Eat!</h3>
<div classs="form-group">
    <div>
        <label for="PositionOverride" class="form-label">Search Location</label>
        <input type="text" class="form-text" @bind-value=@overridenPosition.OverridenLocation @bind-value:event="oninput"/>
        <label >Search Radius: @searchRange.ToString("0.0") Mi </label>
        <input type="range" class="slider" step=".1" min="1" max="24.8" @bind-value=@searchRange @bind-value:event="oninput"/>
    </div>

    <div>
        <h5 class="h5">Search Categories</h5>
        <a @onclick="args => updateAllCategoryFilter(true)" href="#">Check All</a> / <a @onclick="_ => updateAllCategoryFilter(false)" href="#">Uncheck All</a>
        <ul class="list-group" style="display: inline-table">
            @foreach (var cat in categoriesFilter.Keys)
            {
                <li class="list-group-item-action" @onclick="_ => toggleCategory(categoriesFilter[cat], cat)" style="width: 17em; display: inline-table">
                    <input type="checkbox" value=@cat @bind=@categoriesFilter[cat]>
                    <label >@cat</label>
                </li>
            }
        </ul>
    </div>

    <button class="btn btn-primary" @onclick="formSubmit">Search</button>
</div>

<div style="width:fit-content">
@if (selectedLocation is not null) {
    <ul style="">
    @foreach (var photo in selectedLocation?.Photos) {
        <img class="img img-thumbnail" src=@photo />
    }
        <li class="list-group list-group-item"><a class="link link-primary" href=@selectedLocation.Url>@selectedLocation.Name</a></li>
        <li class="list-group list-group-item">Rating: @selectedLocation.Rating</li>
        <li class="list-group list-group-item">Price: @selectedLocation.Price</li>
        <li class="list-group list-group-item">Distance: @ShopExtensions.toMiles(selectedLocation.Distance).ToString("0.00") Miles Away</li>
        <li class="list-group list-group-item"><h5 class="h5">Categories</h5>
        <ul>
            @foreach (var category in selectedLocation?.Categories) {
                <li class="list-group list-group-item">@category.Title</li>
            }
        </ul>
        </li>
    </ul>
} else {
     <p>Restaurant information is not available</p>
}</div>



@code {
    private List<Business> locations = new();
    private Business? selectedLocation;
    private Dictionary<string, bool> categoriesFilter = new();
    private SearchLocation? currentPosition = new();
    private SearchLocation overridenPosition = new();
    private DateTime? cacheDate = DateTime.UtcNow;
    private float searchRange = 5;//search radius in miles
    private float queriedRange = 0;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        overridenPosition.OverridenLocation = "Enter a location";


        cacheDate = (await ProtectedSessionStore.GetAsync<DateTime?>("BusinessCacheDateTime")).Value ?? cacheDate;
        locations = (await ProtectedSessionStore.GetAsync<List<Business>?>("Business")).Value ?? locations;
        categoriesFilter = (await ProtectedSessionStore.GetAsync<Dictionary<string, bool>>("categoriesFilter")).Value ?? categoriesFilter;
        queriedRange = (await ProtectedSessionStore.GetAsync<float?>("QuriedRange")).Value ?? queriedRange;

        (currentPosition, bool hasChanged) = await LocationService.GetLocation(currentPosition, overridenPosition);

        if (currentPosition is null || currentPosition.Error is not null) {
            await clearCache(); //if there is no position, overridden or not, there is nothing to get.
            return;
        }

        //if the position has changed, cache is out of date, is no cache or if the search radius has changed
        if (hasChanged || DateTime.UtcNow >= cacheDate || searchRange > queriedRange) { 
            updateVariables( await yelp.GetYelpData(currentPosition.getCurrentLocation(), searchRange) );
            await setCache();
        }

        await getRandomShop();
    }

    private async void formSubmit() {
        bool overriden = false;
        if (!overridenPosition.OverridenLocation.Equals("") && !overridenPosition.OverridenLocation.Equals("Enter a location")) {
            overridenPosition.isOverridden = true;
            overriden = true;
        }

        if (overridenPosition.hasChanged(currentPosition) || searchRange > queriedRange) {
            await clearCache();
            updateVariables( await yelp.GetYelpData(overriden?overridenPosition.getCurrentLocation():currentPosition?.getCurrentLocation(), searchRange) );
            if (overriden) {
                currentPosition = overridenPosition;
                overridenPosition = new();
                overridenPosition.OverridenLocation = currentPosition.OverridenLocation.ToString();
            }
            await setCache();
        }
        await getRandomShop();
    }

    public void updateVariables(IList<Business> YelpUpdate) {
        queriedRange = searchRange;
        locations = YelpUpdate.ToList() ?? locations;

        foreach (var title in locations.SelectMany(x => x?.Categories?.Select(x => x.Title)).Distinct())
            if(!categoriesFilter.ContainsKey(title??"")) categoriesFilter.Add((string?)title??"", true);
    }

    public async Task getRandomShop(string value = "") {
        selectedLocation = locations.Where(x=>x.Categories.Any(x=> categoriesFilter.ContainsKey(x.Title??"")&&categoriesFilter[x.Title??""])&&(x.Distance <= ShopExtensions.toMeters(searchRange))).GetRandom();
        await ProtectedSessionStore.SetAsync("categoriesFilter", categoriesFilter);
        StateHasChanged();
    }
    public void toggleCategory(bool isChecked, string catTitle) {
        if (categoriesFilter.ContainsKey(catTitle))
            categoriesFilter[catTitle] = !isChecked;
    }
    public void updateAllCategoryFilter(bool isChecked) {
        foreach (var key in categoriesFilter.Keys)
            categoriesFilter[key] = isChecked;
    }
    
    public async Task setCache() {
        await ProtectedSessionStore.SetAsync("Business", locations);
        await ProtectedSessionStore.SetAsync("BusinessCacheDateTime", ShopExtensions.roundUp30(DateTime.UtcNow));
        await ProtectedSessionStore.SetAsync("categoriesFilter", categoriesFilter);
        await ProtectedSessionStore.SetAsync("QuriedRange", queriedRange);
    }

    public async Task clearCache() {
        await ProtectedSessionStore.DeleteAsync("Business");
        await ProtectedSessionStore.DeleteAsync("BusinessCacheDateTime");
        await ProtectedSessionStore.DeleteAsync("categoriesFilter");
        await ProtectedSessionStore.DeleteAsync("QuriedRange");
        cacheDate = null;
    }
}
